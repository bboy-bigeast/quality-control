from django.conf import settings
from django.http import HttpResponseForbidden
import ipaddress
import re

class IPAuthMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        self.ip_ranges = settings.IP_ROLES

    def __call__(self, request):
        client_ip = self.get_client_ip(request)
        request.user_role = self.determine_role(client_ip)
        return self.get_response(request)
    
    def get_client_ip(self, request):
        """获取真实的客户端IP"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            # 可能有多个IP，取第一个
            ip = x_forwarded_for.split(',')[0].strip()
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
    
    def determine_role(self, ip_str):
        """根据IP确定用户角色"""
        # 管理员IP段
        if any(self.is_ip_in_range(ip_str, r) for r in self.ip_ranges.get('admin', [])):
            return 'admin'
        # 质检员IP段
        elif any(self.is_ip_in_range(ip_str, r) for r in self.ip_ranges.get('inspector', [])):
            return 'inspector'
        # 默认普通用户
        return 'user'

    def is_ip_in_range(self, ip_str, ip_range):
        """
        检查IP地址是否在指定范围内
        支持格式：
        - 单个IP: "192.168.1.1"
        - CIDR表示法: "192.168.1.0/24"
        - IP范围: "192.168.1.100-192.168.1.200"
        - 通配符: "192.168.1.*" 或 "192.168.*.*"
        """
        try:
            # 尝试将输入IP转换为ipaddress对象
            ip = ipaddress.ip_address(ip_str)
            
            # 处理CIDR表示法 (192.168.1.0/24)
            if '/' in ip_range:
                network = ipaddress.ip_network(ip_range, strict=False)
                return ip in network
            
            # 处理IP范围 (192.168.1.100-192.168.1.200)
            elif '-' in ip_range:
                start_ip, end_ip = ip_range.split('-')
                start = ipaddress.ip_address(start_ip.strip())
                end = ipaddress.ip_address(end_ip.strip())
                return start <= ip <= end
            
            # 处理通配符格式 (192.168.1.* 或 192.168.*.*)
            elif '*' in ip_range:
                # 将通配符转换为正则表达式
                pattern = ip_range.replace('.', r'\.').replace('*', r'\d{1,3}')
                regex = re.compile(f"^{pattern}$")
                return bool(regex.match(ip_str))
            
            # 处理单个IP地址
            else:
                return ip_str == ip_range
        
        except (ValueError, ipaddress.AddressValueError):
            # IP地址格式无效
            return False
